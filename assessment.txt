Credit Card Form

Analysis - Problem
We need an interactive credit card form, where there is a credit card
that reflects the value of the form in real time.

Analysis - Use Cases
- User submits all correct data
- User submits form partially correct (i.e. some field(s) are missing correct values)
- User submits form totally incorrect (i.e. all fields are incorrect)

Requirements
- UI
  - Components
    - Form
      - Card Number Text Field
        - This needs to be spaced accordingly, where every four digits, a space is
          added b/w the current group and the next
      - Card Name Text Field (i.e. cc company)
      - Expiration Date Dropdowns
        - Month (2 digit format)
        - Year (4 digit format)
      - CVV Text Field
      - Submit Button
    - Credit Card
      - It will contain data/values from all of the fields mentioned above
  - Positioning of Components
    - CC overlaps form w/ a box shadow underneath the card
- UX
  - Validation
  - Interactive Card
    - Fields in card update as user fills out form (e.g. if user adds 1 for cc number, 1 gets added to cc)
  - Default State of CC Number for CC
    - #

---

Next Steps:
- Finish Assessment Before Moving Forward; start w/ the credit card image
- Implement Technical Assessment

---

Credit Card Image

Analysis - Problem
I need to overlay a credit card over the actual form.  Note, that both the front
and the back of the credit card need to be included in this.

Requirements
- Image(s) (Front and back)
  - URL(s)
  - Dimensions

Technical Design
- Image
  - URL - Front
    - https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/5.jpeg
    - https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/visa.png
    - https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/chip.png
  - URL - Back
    - https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/visa.png 
  - URL Other Asset Like Elements
    - Back
      - Magnetic Stripe
      - White Stripe (for CVV)
- Markup
  ```
  <div class="credit-card">
    <div class="credit-card-background-image-container"></div>
    <div class="credit-card-chip-container"></div>
    <div class="credit-card-logo-container"></div>
    <div class="credit-card-number-container"></div>
    <div class="credit-card-name-container"></div>
    <div class="credit-card-expiration-container"></div>
  </div>
  ```
  - Notes
    - The credit-card-content-container could the be "overlayed"
      the actual background 
      
---

Next Steps
- Assess and implement the overlaying of card on form (CHECK)
- Assess and implement the back of the card (CHECK)
- Assess and implement functionalities
  - Tackle Functionalities in Small Batches
  - Functionalities
    - Validation of Form
    - Flipping Behavior (when focused on CVV)
    - Mirroring Behavior
    - Clicking on CC Behavior
- Clean up UI
- Implement README

---

Validation

Analysis - Problem
I need to ensure that all fields are filled out and filled out properly.

Analysis- UX Thoughts
I am thinking that for the number only fields, only accept numbers, in order to help
the user.

Requirements - Fields:
- Credit Card Number
  - Numbers Only
  - Formatted (i.e. 4 digits and then 1 space character)
  - 16 Numbers in Length
- Name
  - Any Character(s)
- Expiration Date
  - Simply required
- CVV
  - 3 Digits
    - Put that as max constraint

Requirements - Messaging:
- Error Messages
  - Display err messages whenever a field is not properly filled out

Analysis - Questions
1) How to enforce constraints on inputs in React?
1) Since React is the source of truth for the value of the widget,
   then simply setting the state to be a numeric one only will work 

Technical Design

Simple Input Fields
This refers to Name and Expiration Date; they do not need any form of
constraints other than required, thus, a "simple approach" can be taken
here.  This essentially means that they can be validated to have a value once
the user submits the form.
What this will look like in practice is simply attaching a plain event handler
that updates the state for said field on change, and that is it!

What this will look like is:
- {event => stateChangeFunc(event.target.value)}

Constraint Enforced Fields
This refers to Credit Card Number and CVV fields.  The former needs
formatting and a filtering mechanism for numbers only, and the latter
needs a filtering mechanism for numbers only and a max length of three.

For these two fields, we can create the following:
- handleUpdatedForCreditCardNumber
- handleUpdateForCvv

---

Additional Notes:
- Refactor Code
  - Specific Opps:
    - Visa logo on back and front of card
    - Form Validation for Vanilla React Implementation
- Assess how to salvage projects to demonstrate learnings
  on Redux
- Assess and implement Formik alternative (?)