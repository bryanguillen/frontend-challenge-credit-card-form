{"version":3,"sources":["components/credit-card/back/CreditCardBack.jsx","components/credit-card/front/CreditCardFront.jsx","components/credit-card/front/credit-card-front-utils.js","components/credit-card/CreditCard.jsx","components/form/CreditCardForm.jsx","components/form/credit-card-form-utils.js","App.jsx","utils/validate-form-fields.js","serviceWorker.js","index.js"],"names":["CreditCardBack","creditCardCvvFromInput","className","src","alt","CreditCardFront","creditCardExpirationMonthFromInput","creditCardExpirationYearFromInput","fieldValues","setFocusOnCreditCardNumber","setFocusOnCreditCardName","setFocusOnCreditCardExpirationMonth","creditCardNumber","creditCardName","creditExpirationMonth","creditExpirationYear","onClick","creditCardNumberFromInput","creditCardNumberLength","length","substring","getCreditCardNumber","CreditCard","formValues","showFront","flipperClasses","creditCardCvv","CreditCardForm","cvvOnBlur","cvvOnFocus","handleChange","handleSubmit","focusOnCreditCardNumber","onBlurForCreditCardNumberInput","focusOnCreditCardName","onBlurForCreditCardNameInput","focusOnCreditCardExpirationMonth","onBlurForCreditCardExpirationMonthInput","formFields","creditCardNumberInputElement","useRef","creditCardNameInputElement","creditCardExpirationMonthInputElement","useEffect","current","focus","onSubmit","htmlFor","showError","name","id","type","placeholder","onChange","event","value","target","newValue","maxNumberOfSpaces","normalizedValue","replace","formattedValue","spacesAdded","i","addSpaceEveryFourChars","maxLength","onBlur","ref","defaultValue","onFocus","App","initialFormFieldState","useState","focused","setFormFields","setShowFront","toggleFieldFocus","previousState","field","getFormValues","fieldName","preventDefault","showCreditCardNumberError","showCreditCardNameError","showCreditExpirationMonthError","showCreditExpirationYearError","showCreditCvvError","trim","validateFormFields","updatedState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f61ab03.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './CreditCardBack.css';\r\n\r\nexport default function CreditCardBack({ creditCardCvvFromInput }) {\r\n  return (\r\n    <div className=\"credit-card-back\">\r\n      <div className=\"magnetic-stripe\"></div>\r\n      <div className=\"cvv-stripe-container\">\r\n        <div className=\"cvv-stripe-label\">CVV</div>\r\n        <div className=\"cvv-stripe\">{creditCardCvvFromInput}</div>\r\n      </div>\r\n      <div className=\"credit-card-back-logo-container\">\r\n        <img\r\n          className=\"credit-card-back-logo\"\r\n          src=\"https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/visa.png\"\r\n          alt=\"credit card logo\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport { getCreditCardNumber, getExpirationDate } from './credit-card-front-utils';\r\n\r\nimport './CreditCardFront.css';\r\n\r\nexport default function CreditCardFront({\r\n  fieldValues,\r\n  setFocusOnCreditCardNumber,\r\n  setFocusOnCreditCardName,\r\n  setFocusOnCreditCardExpirationMonth\r\n}) {\r\n  const {\r\n    creditCardNumber,\r\n    creditCardName,\r\n    creditExpirationMonth,\r\n    creditExpirationYear\r\n  } = fieldValues;\r\n\r\n  return (\r\n    <div className=\"credit-card-front\">\r\n      <div className=\"credit-card-chip-brand-container\">  \r\n        <div className=\"credit-card-chip-container\">\r\n          <img\r\n            className=\"credit-card-chip\"\r\n            src=\"https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/chip.png\"\r\n            alt=\"credit card chip\"\r\n          />\r\n        </div>\r\n        <div className=\"credit-card-logo-container\">\r\n          <img\r\n            className=\"credit-card-logo\"\r\n            src=\"https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/visa.png\"\r\n            alt=\"credit card logo\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"credit-card-number-container\">\r\n        <div className=\"credit-card-number\" onClick={setFocusOnCreditCardNumber}>{getCreditCardNumber(creditCardNumber)}</div>\r\n      </div>\r\n      <div className=\"credit-card-name-and-expiration-container\">\r\n        <div className=\"credit-card-name-container\" onClick={setFocusOnCreditCardName}>\r\n          <div className=\"credit-card-holder-label\">Card Holder</div>\r\n          <div className=\"credit-card-holder-name\">{creditCardName}</div>\r\n        </div>\r\n        <div className=\"credit-card-expiration-container\" onClick={setFocusOnCreditCardExpirationMonth}>\r\n          <div className=\"credit-card-expiration-label\">Expires</div>\r\n          <div className=\"credit-card-expiration\">{getExpirationDate(creditExpirationMonth, creditExpirationYear)}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","/**\r\n * @description Helper function used to wrap the logic required\r\n * for properly replacing the hashes in the credit card number \r\n * field with what is in the text input.  In other words, this helps\r\n * the credit card mirror what is in the text input\r\n * @param {String} creditCardNumberFromInput\r\n * @returns {String}\r\n */\r\nexport function getCreditCardNumber(creditCardNumberFromInput) {\r\n  const creditCardNumberMaxLength = 19;\r\n  const hashedCreditCardNumber = '#### #### #### ####';\r\n  const creditCardNumberLength = creditCardNumberFromInput.length;\r\n\r\n  if (creditCardNumberLength === creditCardNumberMaxLength) {\r\n    return creditCardNumberFromInput;\r\n  } else if (creditCardNumberLength < creditCardNumberMaxLength && creditCardNumberLength > 0) {\r\n    return creditCardNumberFromInput.substring(0, creditCardNumberLength) + hashedCreditCardNumber.substring(creditCardNumberLength)\r\n  } else {\r\n    return hashedCreditCardNumber;\r\n  }\r\n}\r\n\r\n/**\r\n * @description Helper function used for the same purpose as the one above -- to help\r\n * wrap the logic of getting the actual month and year, which will replace the defaults\r\n * once the value is chosen for each field\r\n * @param {String} creditCardExpirationMonthFromInput\r\n * @param {String} creditCardExpirationYearFromInput\r\n * @returns {String}\r\n */\r\nexport function getExpirationDate(creditCardExpirationMonthFromInput, creditCardExpirationYearFromInput) {\r\n  const expirationMonth = creditCardExpirationMonthFromInput === '' ? 'MM' : creditCardExpirationMonthFromInput;\r\n  const expirationYear = creditCardExpirationYearFromInput === '' ? 'YYYY' : creditCardExpirationYearFromInput;\r\n\r\n  return expirationMonth + '/' + expirationYear;\r\n}","import React from 'react';\r\n\r\nimport CreditCardBack from './back/CreditCardBack';\r\nimport CreditCardFront from './front/CreditCardFront';\r\n\r\nimport './CreditCard.css';\r\n\r\nexport default function CreditCard({\r\n  formValues,\r\n  showFront,\r\n  setFocusOnCreditCardNumber,\r\n  setFocusOnCreditCardName,\r\n  setFocusOnCreditCardExpirationMonth\r\n}) {\r\n  const flipperClasses = showFront ? 'flipper' : 'flipper show-back';\r\n  const {\r\n    creditCardNumber,\r\n    creditCardName,\r\n    creditExpirationMonth,\r\n    creditExpirationYear,\r\n    creditCardCvv\r\n  } = formValues;\r\n\r\n  return (\r\n    <div className=\"credit-card\">\r\n      <div className={flipperClasses}>\r\n        <CreditCardFront\r\n          fieldValues={{ creditCardNumber, creditCardName, creditExpirationMonth, creditExpirationYear }}\r\n          setFocusOnCreditCardNumber={setFocusOnCreditCardNumber}\r\n          setFocusOnCreditCardName={setFocusOnCreditCardName}\r\n          setFocusOnCreditCardExpirationMonth={setFocusOnCreditCardExpirationMonth}\r\n        />\r\n        <CreditCardBack\r\n          creditCardCvvFromInput={creditCardCvv}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React, { useRef, useEffect } from 'react';\r\n\r\nimport { addSpaceEveryFourChars } from './credit-card-form-utils';\r\n\r\nimport './CreditCardForm.css';\r\n\r\nexport default function CreditCardForm({\r\n  cvvOnBlur,\r\n  cvvOnFocus,\r\n  handleChange,\r\n  handleSubmit,\r\n  focusOnCreditCardNumber,\r\n  onBlurForCreditCardNumberInput,\r\n  focusOnCreditCardName,\r\n  onBlurForCreditCardNameInput,\r\n  focusOnCreditCardExpirationMonth,\r\n  onBlurForCreditCardExpirationMonthInput,\r\n  formFields\r\n}) {\r\n  const creditCardNumberInputElement = useRef(null);\r\n  const creditCardNameInputElement = useRef(null);\r\n  const creditCardExpirationMonthInputElement = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    if (focusOnCreditCardNumber) {\r\n      creditCardNumberInputElement.current.focus();\r\n    }\r\n\r\n    if (focusOnCreditCardName) {\r\n      creditCardNameInputElement.current.focus();\r\n    }\r\n\r\n    if (focusOnCreditCardExpirationMonth) {\r\n      creditCardExpirationMonthInputElement.current.focus();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <form className=\"credit-card-form\" onSubmit={handleSubmit}>\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"creditCardNumber\" className=\"block-label\">Credit Card Number</label>\r\n        {formFields.creditCardNumber.showError ? <div className=\"credit-card-form-error number-input-error\">Please ensure you include a 16 digit number for this field.</div> : null}\r\n        <input\r\n          className=\"credit-card-text-field number-input\"\r\n          name=\"creditCardNumber\"\r\n          id=\"creditCardNumber\"\r\n          type=\"text\"\r\n          placeholder=\"1234 5678 1234 5678\"\r\n          onChange={event => {\r\n            const { value } = event.target;\r\n            const userDidNotDeleteCharacter = formFields.creditCardNumber.value.length < value.length;\r\n            const newValue = userDidNotDeleteCharacter ? addSpaceEveryFourChars(value) : value;\r\n            handleChange('creditCardNumber', newValue)}\r\n          }\r\n          value={formFields.creditCardNumber.value}\r\n          maxLength={19}\r\n          onBlur={onBlurForCreditCardNumberInput}\r\n          ref={creditCardNumberInputElement}\r\n        />\r\n      </div>\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"creditCardName\" className=\"block-label\">Credit Card Name</label>\r\n        {formFields.creditCardName.showError ? <div className=\"credit-card-form-error name-input-error\">Please include a name for this field</div> : null}\r\n        <input\r\n          className=\"credit-card-text-field name-input\"\r\n          name=\"creditCardName\"\r\n          id=\"creditCardName\"\r\n          type=\"text\"\r\n          placeholder=\"John Smith\"\r\n          onChange={event => handleChange('creditCardName', event.target.value)}\r\n          value={formFields.creditCardName.value}\r\n          onBlur={onBlurForCreditCardNameInput}\r\n          ref={creditCardNameInputElement}\r\n        />\r\n      </div>\r\n      <div className=\"input-group input-group-flex\">\r\n        <fieldset className=\"credit-card-expiration-date-container\">\r\n          <legend className=\"block-label credit-card-expiration-legend\">Expiration Date</legend>\r\n          {formFields.creditExpirationMonth.showError || formFields.creditExpirationYear.showError ? <div className=\"credit-card-form-error expiration-input-error\">Please select both a month and year.</div> : null}\r\n          <div className=\"credit-card-expiration-selects-container\">\r\n            <label htmlFor=\"creditCardExpirationMonth\" className=\"hidden-label\">Month</label>\r\n            <select\r\n              className=\"credit-card-select-field expiration-month-input\"\r\n              name=\"creditExpirationMonth\"\r\n              id=\"creditExpirationMonth\"        \r\n              onChange={event => handleChange('creditExpirationMonth', event.target.value)}\r\n              value={formFields.creditExpirationMonth.value}\r\n              onBlur={onBlurForCreditCardExpirationMonthInput}\r\n              ref={creditCardExpirationMonthInputElement}\r\n            >\r\n              <option defaultValue>Month</option>\r\n              <option>01</option>\r\n              <option>02</option>\r\n              <option>03</option>\r\n              <option>04</option>\r\n              <option>05</option>\r\n              <option>06</option>\r\n              <option>07</option>\r\n              <option>08</option>\r\n              <option>09</option>\r\n              <option>10</option>\r\n              <option>11</option>\r\n              <option>12</option>\r\n            </select>\r\n            <label htmlFor=\"creditCardExpirationYear\" className=\"hidden-label\">Year</label>\r\n            <select\r\n              className=\"credit-card-select-field expiration-year-input\"\r\n              name=\"creditExpirationYear\"\r\n              id=\"creditExpirationYear\"\r\n              onChange={event => handleChange('creditExpirationYear', event.target.value)}\r\n              value={formFields.creditExpirationYear.value}\r\n            >\r\n              <option defaultValue>Year</option>\r\n              <option>2021</option>\r\n              <option>2022</option>\r\n              <option>2023</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n        <div className=\"credit-card-cvv-container\">\r\n          <label htmlFor=\"creditCardCvv\" className=\"block-label\">CVV</label>\r\n          {formFields.creditCardCvv.showError ? <div className=\"credit-card-form-error cvv-input-error\">Please enter a valid 3 digit number.</div> : null}\r\n          <input\r\n            className=\"credit-card-text-field cvv-input\"\r\n            type=\"text\"\r\n            placeholder=\"123\"\r\n            onChange={event => handleChange('creditCardCvv', event.target.value.replace(/\\D/g, ''))}\r\n            maxLength={3}\r\n            value={formFields.creditCardCvv.value}\r\n            onBlur={cvvOnBlur}\r\n            onFocus={cvvOnFocus}\r\n            name=\"creditCardCvv\"\r\n            id=\"creditCardCvv\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"submit-credit-card-form-button\">Submit</button>\r\n    </form>\r\n  );\r\n}","/**\r\n * @description Function used to add a space every four characters, given a string;\r\n * it's used to add spaces for the value within the credit card number input\r\n * @param {String} value\r\n * @param {Number} maxNumberOfSpaces\r\n * @returns {String}\r\n */\r\nexport function addSpaceEveryFourChars(value, maxNumberOfSpaces = 3) {\r\n  const normalizedValue = value.replace(/\\D/g, '');\r\n  let formattedValue = '';\r\n  let spacesAdded = 0;\r\n\r\n  for (let i = 0; i < normalizedValue.length; i++) {\r\n    formattedValue += normalizedValue[i];\r\n    if ((i + 1) % 4 === 0 && spacesAdded < maxNumberOfSpaces) {\r\n      formattedValue += ' ';\r\n      spacesAdded += 1;\r\n    }\r\n  }\r\n\r\n  return formattedValue;\r\n}","import React, { useState } from 'react';\r\n\r\nimport CreditCard from './components/credit-card/CreditCard';\r\nimport CreditCardForm from './components/form/CreditCardForm';\r\n\r\nimport validateFormFields from './utils/validate-form-fields';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  // Form control names\r\n  const CREDIT_CARD_NUMBER = 'creditCardNumber';\r\n  const CREDIT_CARD_NAME = 'creditCardName';\r\n  const CREDIT_CARD_EXPIRATION_MONTH = 'creditExpirationMonth';\r\n\r\n  // Initial state for form controls\r\n  const initialFormFieldState = {\r\n    value: '',\r\n    showError: false\r\n  };\r\n\r\n  // form state\r\n  const [formFields, setFormFields] = useState({\r\n    [CREDIT_CARD_NUMBER]: { ...initialFormFieldState, focused: false },\r\n    [CREDIT_CARD_NAME]: { ...initialFormFieldState, focused: false },\r\n    [CREDIT_CARD_EXPIRATION_MONTH]: { ...initialFormFieldState, focused: false },\r\n    creditExpirationYear: initialFormFieldState,\r\n    creditCardCvv: initialFormFieldState\r\n  });\r\n\r\n  // Credit card side state\r\n  const [showFront, setShowFront] = useState(true);\r\n\r\n  /**\r\n   * @description Function for extracting an object, where each key is the\r\n   * name of the field and the value is value.  It's passed into credit card\r\n   * component\r\n   * @returns {Object}\r\n   */\r\n  function getFormValues() {\r\n    const formValues = {};\r\n\r\n    for (const field in formFields) {\r\n      const { value } = formFields[field];\r\n      formValues[field] = value;\r\n    }\r\n\r\n    return formValues;\r\n  }\r\n\r\n  /**\r\n   * @description Function for handling the change event for the credit card form\r\n   * @param {String} fieldName\r\n   * @param {String} value\r\n   * @returns {}\r\n   */\r\n  function handleChange(fieldName, value) {\r\n    setFormFields(previousState =>\r\n      ({ ...previousState, [fieldName]: { ...previousState[fieldName], value } })\r\n    )\r\n  }\r\n\r\n  /**\r\n   * @description Handler for submit; it simply validates the fields\r\n   * @param {Object} event\r\n   */\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    setFormFields(previousState => {\r\n      const {\r\n        showCreditCardNumberError,\r\n        showCreditCardNameError,\r\n        showCreditExpirationMonthError,\r\n        showCreditExpirationYearError,\r\n        showCreditCvvError\r\n      } = validateFormFields(formFields);\r\n      const updatedState = {\r\n        creditCardNumber: { ...previousState.creditCardNumber, showError: showCreditCardNumberError },\r\n        creditCardName: { ...previousState.creditCardName, showError: showCreditCardNameError },\r\n        creditExpirationMonth: { ...previousState.creditExpirationMonth, showError: showCreditExpirationMonthError },\r\n        creditExpirationYear: { ...previousState.creditExpirationYear, showError: showCreditExpirationYearError },\r\n        creditCardCvv: { ...previousState.creditCardCvv, showError: showCreditCvvError }\r\n      };\r\n\r\n      return { ...updatedState };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @description Wrapper for updating the focused boolean of a input field\r\n   */\r\n  function toggleFieldFocus(name, value) {\r\n    setFormFields(previousState =>\r\n      ({ ...previousState, [name]: { ...previousState[name], focused: value } })\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <CreditCard\r\n        formValues={getFormValues()}\r\n        setFocusOnCreditCardNumber={() =>  toggleFieldFocus(CREDIT_CARD_NUMBER, true)}\r\n        setFocusOnCreditCardName={() =>  toggleFieldFocus(CREDIT_CARD_NAME, true)}\r\n        setFocusOnCreditCardExpirationMonth={() =>  toggleFieldFocus(CREDIT_CARD_EXPIRATION_MONTH, true)}\r\n        showFront={showFront}\r\n      />\r\n      <CreditCardForm\r\n        handleChange={handleChange}\r\n        handleSubmit={handleSubmit}\r\n        cvvOnFocus={() => setShowFront(false)}\r\n        cvvOnBlur={() => setShowFront(true)}\r\n        focusOnCreditCardNumber={formFields.creditCardNumber.focused}\r\n        onBlurForCreditCardNumberInput={() =>  toggleFieldFocus(CREDIT_CARD_NUMBER, false)}\r\n        focusOnCreditCardName={formFields.creditCardName.focused}\r\n        onBlurForCreditCardNameInput={() => toggleFieldFocus(CREDIT_CARD_NAME, false)}\r\n        focusOnCreditCardExpirationMonth={formFields.creditExpirationMonth.focused}\r\n        onBlurForCreditCardExpirationMonthInput={() =>  toggleFieldFocus(CREDIT_CARD_EXPIRATION_MONTH, false)}\r\n        formFields={formFields}\r\n        setFormFields={setFormFields}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/**\r\n * @description Function used to encapsulate the validation logic for\r\n * the \"application\" form fields; this helps make the application more readable\r\n * @param {Object} formFields\r\n * @returns { Object }\r\n */\r\nexport default function validateFormFields(formFields) {\r\n  let showCreditCardNumberError = false;\r\n  let showCreditCardNameError = false;\r\n  let showCreditExpirationMonthError = false;\r\n  let showCreditExpirationYearError = false;\r\n  let showCreditCvvError = false;\r\n\r\n  if (formFields.creditCardNumber.value === '' || formFields.creditCardNumber.value.length !== 19) {\r\n    showCreditCardNumberError = true;\r\n  }\r\n\r\n  if (formFields.creditCardName.value.trim() === '') {\r\n    showCreditCardNameError = true;\r\n  }\r\n\r\n  if (formFields.creditExpirationMonth.value === '' || formFields.creditExpirationYear.value === '') {\r\n    showCreditExpirationMonthError = true;\r\n    showCreditExpirationYearError = true;\r\n  }\r\n\r\n  if (formFields.creditCardCvv.value.trim() === '' || formFields.creditCardCvv.value.length !== 3) {\r\n    showCreditCvvError = true;\r\n  }\r\n\r\n  return {\r\n    showCreditCardNumberError,\r\n    showCreditCardNameError,\r\n    showCreditExpirationMonthError,\r\n    showCreditExpirationYearError,\r\n    showCreditCvvError\r\n  };\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}