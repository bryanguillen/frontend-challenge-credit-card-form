{"version":3,"sources":["CreditCardBack.jsx","CreditCardFront.jsx","CreditCard.jsx","CreditCardForm.jsx","App.jsx","utils/validate-form-fields.js","serviceWorker.js","index.js"],"names":["CreditCardBack","creditCardCvvFromInput","className","src","alt","CreditCardFront","creditCardExpirationMonthFromInput","creditCardExpirationYearFromInput","creditCardNumberFromInput","creditCardNameFromInput","setFocusOnCreditCardNumber","setFocusOnCreditCardName","setFocusOnCreditCardExpirationMonth","onClick","creditCardNumberLength","length","substring","getCreditCardNumber","CreditCard","showFront","flipperClasses","CreditCardForm","creditCardNumber","cvvOnBlur","cvvOnFocus","handleSubmit","focusOnCreditCardNumber","onBlurForCreditCardNumberInput","focusOnCreditCardName","onBlurForCreditCardNameInput","focusOnCreditCardExpirationMonth","onBlurForCreditCardExpirationMonthInput","formFields","setFormFields","creditCardNumberInputElement","useRef","creditCardNameInputElement","creditCardExpirationMonthInputElement","handleChange","event","fieldName","target","name","updatedStateForControl","value","showError","previousState","useEffect","current","focus","onSubmit","htmlFor","id","type","placeholder","onChange","maxNumberOfSpaces","normalizedValue","replace","formattedValue","spacesAdded","i","addSpaceEveryFourChars","maxLength","onBlur","ref","creditCardName","creditExpirationMonth","creditExpirationYear","defaultValue","creditCardCvv","updatedStateForCvv","onFocus","App","useState","setShowFront","preventDefault","showCreditCardNumberError","showCreditCardNameError","showCreditExpirationMonthError","showCreditExpirationYearError","showCreditCvvError","trim","validateFormFields","updatedState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25594f92.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nimport './CreditCardBack.css';\r\n\r\nexport default function CreditCardBack({ creditCardCvvFromInput }) {\r\n  return (\r\n    <div className=\"credit-card-back\">\r\n      <div className=\"magnetic-stripe\"></div>\r\n      <div className=\"cvv-stripe-container\">\r\n        <div className=\"cvv-stripe-label\">CVV</div>\r\n        <div className=\"cvv-stripe\">{creditCardCvvFromInput}</div>\r\n      </div>\r\n      <div className=\"credit-card-back-logo-container\">\r\n        <img\r\n          className=\"credit-card-back-logo\"\r\n          src=\"https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/visa.png\"\r\n          alt=\"credit card logo\"\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport './CreditCardFront.css';\r\n\r\nexport default function CreditCardFront({\r\n  creditCardExpirationMonthFromInput,\r\n  creditCardExpirationYearFromInput,\r\n  creditCardNumberFromInput,\r\n  creditCardNameFromInput,\r\n  setFocusOnCreditCardNumber,\r\n  setFocusOnCreditCardName,\r\n  setFocusOnCreditCardExpirationMonth\r\n}) {\r\n  /**\r\n   * @description Helper function used to wrap the logic required\r\n   * for properly replacing the hash tags in the credit card number \r\n   * field\r\n   * @returns {String}\r\n   */\r\n  function getCreditCardNumber() {\r\n    const creditCardNumberMaxLength = 19;\r\n    const hashedCreditCardNumber = '#### #### #### ####';\r\n    const creditCardNumberLength = creditCardNumberFromInput.length;\r\n\r\n    if (creditCardNumberLength === creditCardNumberMaxLength) {\r\n      return creditCardNumberFromInput;\r\n    } else if (creditCardNumberLength < creditCardNumberMaxLength && creditCardNumberLength > 0) {\r\n      return creditCardNumberFromInput.substring(0, creditCardNumberLength) + hashedCreditCardNumber.substring(creditCardNumberLength)\r\n    } else {\r\n      return hashedCreditCardNumber;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @description Helper function used for the same purpose as the one above -- to help\r\n   * wrap the logic of getting the actual month and year, which will replace the defaults\r\n   * once the value is chosen for each field\r\n   * @returns {String}\r\n   */\r\n  function getExpirationDate() {\r\n    const expirationMonth = creditCardExpirationMonthFromInput === '' ? 'MM' : creditCardExpirationMonthFromInput;\r\n    const expirationYear = creditCardExpirationYearFromInput === '' ? 'YYYY' : creditCardExpirationYearFromInput;\r\n\r\n    return expirationMonth + '/' + expirationYear;\r\n  }\r\n  \r\n  return (\r\n    <div className=\"credit-card-front\">\r\n      <div className=\"credit-card-chip-brand-container\">  \r\n        <div className=\"credit-card-chip-container\">\r\n          <img\r\n            className=\"credit-card-chip\"\r\n            src=\"https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/chip.png\"\r\n            alt=\"credit card chip\"\r\n          />\r\n        </div>\r\n        <div className=\"credit-card-logo-container\">\r\n          <img\r\n            className=\"credit-card-logo\"\r\n            src=\"https://raw.githubusercontent.com/muhammederdem/credit-card-form/master/src/assets/images/visa.png\"\r\n            alt=\"credit card logo\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"credit-card-number-container\">\r\n        <div className=\"credit-card-number\" onClick={() => setFocusOnCreditCardNumber(true)}>{getCreditCardNumber()}</div>\r\n      </div>\r\n      <div className=\"credit-card-name-and-expiration-container\">\r\n        <div className=\"credit-card-name-container\" onClick={() => setFocusOnCreditCardName(true)}>\r\n          <div className=\"credit-card-holder-label\">Card Holder</div>\r\n          <div className=\"credit-card-holder-name\">{creditCardNameFromInput}</div>\r\n        </div>\r\n        <div className=\"credit-card-expiration-container\" onClick={() => setFocusOnCreditCardExpirationMonth(true)}>\r\n          <div className=\"credit-card-expiration-label\">Expires</div>\r\n          <div className=\"credit-card-expiration\">{getExpirationDate()}</div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React from 'react';\r\n\r\nimport CreditCardBack from './CreditCardBack';\r\nimport CreditCardFront from './CreditCardFront';\r\n\r\nimport './CreditCard.css';\r\n\r\nexport default function CreditCard({\r\n  creditCardCvvFromInput,\r\n  creditCardExpirationMonthFromInput,\r\n  creditCardExpirationYearFromInput,\r\n  creditCardNumberFromInput,\r\n  creditCardNameFromInput,\r\n  showFront,\r\n  setFocusOnCreditCardNumber,\r\n  setFocusOnCreditCardName,\r\n  setFocusOnCreditCardExpirationMonth\r\n}) {\r\n  const flipperClasses = showFront ? 'flipper' : 'flipper show-back';\r\n\r\n  return (\r\n    <div className=\"credit-card\">\r\n      <div className={flipperClasses}>\r\n        <CreditCardFront\r\n          creditCardExpirationMonthFromInput={creditCardExpirationMonthFromInput}\r\n          creditCardExpirationYearFromInput={creditCardExpirationYearFromInput}        \r\n          creditCardNumberFromInput={creditCardNumberFromInput}\r\n          creditCardNameFromInput={creditCardNameFromInput}\r\n          setFocusOnCreditCardNumber={setFocusOnCreditCardNumber}\r\n          setFocusOnCreditCardName={setFocusOnCreditCardName}\r\n          setFocusOnCreditCardExpirationMonth={setFocusOnCreditCardExpirationMonth}\r\n        />\r\n        <CreditCardBack\r\n          creditCardCvvFromInput={creditCardCvvFromInput}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n}","import React, { useRef, useEffect } from 'react';\r\n\r\nimport './CreditCardForm.css';\r\n\r\nexport default function CreditCardForm({\r\n  creditCardNumber,\r\n  cvvOnBlur,\r\n  cvvOnFocus,\r\n  handleSubmit,\r\n  focusOnCreditCardNumber,\r\n  onBlurForCreditCardNumberInput,\r\n  focusOnCreditCardName,\r\n  onBlurForCreditCardNameInput,\r\n  focusOnCreditCardExpirationMonth,\r\n  onBlurForCreditCardExpirationMonthInput,\r\n  formFields,\r\n  setFormFields\r\n}) {\r\n  const creditCardNumberInputElement = useRef(null);\r\n  const creditCardNameInputElement = useRef(null);\r\n  const creditCardExpirationMonthInputElement = useRef(null);\r\n  \r\n  useEffect(() => {\r\n    if (focusOnCreditCardNumber) {\r\n      creditCardNumberInputElement.current.focus();\r\n    }\r\n\r\n    if (focusOnCreditCardName) {\r\n      creditCardNameInputElement.current.focus();\r\n    }\r\n\r\n    if (focusOnCreditCardExpirationMonth) {\r\n      creditCardExpirationMonthInputElement.current.focus();\r\n    }\r\n  });\r\n\r\n  /**\r\n   * @description Function used to add a space every four characters, given a string\r\n   * @param {String} value\r\n   * @returns {String}\r\n   */\r\n  function addSpaceEveryFourChars(value, maxNumberOfSpaces = 3) {\r\n    const normalizedValue = value.replace(/\\D/g, '');\r\n    let formattedValue = '';\r\n    let spacesAdded = 0;\r\n\r\n    for (let i = 0; i < normalizedValue.length; i++) {\r\n      formattedValue += normalizedValue[i];\r\n      if ((i + 1) % 4 === 0 && spacesAdded < maxNumberOfSpaces) {\r\n        formattedValue += ' ';\r\n        spacesAdded += 1;\r\n      }\r\n    }\r\n\r\n    return formattedValue;\r\n  }\r\n  \r\n  /**\r\n   * @description Function used to handle the change for the cvv field\r\n   * @param {Object} event\r\n   */\r\n  function handleChangeForCreditCardCvv(event) {\r\n    const updatedStateForCvv = { creditCardCvv: { value: event.target.value.replace(/\\D/g, ''), showError: false } };\r\n    setFormFields(previousState => ({\r\n      ...previousState,\r\n      ...updatedStateForCvv\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * @description Function used to handle the change for cc number\r\n   * field; it's used to encapsulate the logic for this field, since\r\n   * it is a bit more involved.  It's more involved b/c it has\r\n   * to format (i.e. add a space every 4 digits) and it can only accept\r\n   * digits.\r\n   * @param {Object} event\r\n   */\r\n  function handleChangeForCreditCardNumber(event) {\r\n    const { value } = event.target;\r\n    const userDidNotDeleteCharacter = formFields.creditCardNumber.value.length < value.length;\r\n    const newValue = userDidNotDeleteCharacter ? addSpaceEveryFourChars(value) : value;\r\n    const updatedStateForControl = { creditCardNumber: { value: newValue, showError: false } };\r\n\r\n    setFormFields(previousState => ({\r\n      ...previousState,\r\n      ...updatedStateForControl\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * @description Function used as wrapper for updating state for all form fields, except for\r\n   * the credit card number and cvv field \r\n   * @param {Object} event\r\n   */\r\n  function handleChange(event) {\r\n    const fieldName = event.target.name;\r\n\r\n    const updatedStateForControl = {};\r\n    updatedStateForControl[fieldName] = { value: event.target.value, showError: false };\r\n\r\n    setFormFields(previousState => ({\r\n      ...previousState,\r\n      ...updatedStateForControl\r\n    }));\r\n  }\r\n\r\n  return (\r\n    <form className=\"credit-card-form\" onSubmit={handleSubmit}>\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"creditCardNumber\" className=\"block-label\">Credit Card Number</label>\r\n        {formFields.creditCardNumber.showError ? <div className=\"credit-card-form-error number-input-error\">Please ensure you include a 16 digit number for this field.</div> : null}\r\n        <input\r\n          className=\"credit-card-text-field number-input\"\r\n          name=\"creditCardNumber\"\r\n          id=\"creditCardNumber\"\r\n          type=\"text\"\r\n          placeholder=\"1234 5678 1234 5678\"\r\n          onChange={handleChangeForCreditCardNumber}\r\n          value={formFields.creditCardNumber.value}\r\n          maxLength={19}\r\n          onBlur={onBlurForCreditCardNumberInput}\r\n          ref={creditCardNumberInputElement}\r\n        />\r\n      </div>\r\n      <div className=\"input-group\">\r\n        <label htmlFor=\"creditCardName\" className=\"block-label\">Credit Card Name</label>\r\n        {formFields.creditCardName.showError ? <div className=\"credit-card-form-error name-input-error\">Please include a name for this field</div> : null}\r\n        <input\r\n          className=\"credit-card-text-field name-input\"\r\n          name=\"creditCardName\"\r\n          id=\"creditCardName\"\r\n          type=\"text\"\r\n          placeholder=\"John Smith\"\r\n          onChange={handleChange}\r\n          value={formFields.creditCardName.value}\r\n          onBlur={onBlurForCreditCardNameInput}\r\n          ref={creditCardNameInputElement}\r\n        />\r\n      </div>\r\n      <div className=\"input-group input-group-flex\">\r\n        <fieldset className=\"credit-card-expiration-date-container\">\r\n          <legend className=\"block-label credit-card-expiration-legend\">Expiration Date</legend>\r\n          {formFields.creditExpirationMonth.showError || formFields.creditExpirationYear.showError ? <div className=\"credit-card-form-error expiration-input-error\">Please select both a month and year.</div> : null}\r\n          <div className=\"credit-card-expiration-selects-container\">\r\n            <label htmlFor=\"creditCardExpirationMonth\" className=\"hidden-label\">Month</label>\r\n            <select\r\n              className=\"credit-card-select-field expiration-month-input\"\r\n              name=\"creditExpirationMonth\"\r\n              id=\"creditExpirationMonth\"        \r\n              onChange={handleChange}\r\n              value={formFields.creditExpirationMonth.value}\r\n              onBlur={onBlurForCreditCardExpirationMonthInput}\r\n              ref={creditCardExpirationMonthInputElement}\r\n            >\r\n              <option defaultValue>Month</option>\r\n              <option>01</option>\r\n              <option>02</option>\r\n              <option>03</option>\r\n              <option>04</option>\r\n              <option>05</option>\r\n              <option>06</option>\r\n              <option>07</option>\r\n              <option>08</option>\r\n              <option>09</option>\r\n              <option>10</option>\r\n              <option>11</option>\r\n              <option>12</option>\r\n            </select>\r\n            <label htmlFor=\"creditCardExpirationYear\" className=\"hidden-label\">Year</label>\r\n            <select\r\n              className=\"credit-card-select-field expiration-year-input\"\r\n              name=\"creditExpirationYear\"\r\n              id=\"creditExpirationYear\"\r\n              onChange={handleChange}\r\n              value={formFields.creditExpirationYear.value}\r\n            >\r\n              <option defaultValue>Year</option>\r\n              <option>2021</option>\r\n              <option>2022</option>\r\n              <option>2023</option>\r\n            </select>\r\n          </div>\r\n        </fieldset>\r\n        <div className=\"credit-card-cvv-container\">\r\n          <label htmlFor=\"creditCardCvv\" className=\"block-label\">CVV</label>\r\n          {formFields.creditCardCvv.showError ? <div className=\"credit-card-form-error cvv-input-error\">Please enter a valid 3 digit number.</div> : null}\r\n          <input\r\n            className=\"credit-card-text-field cvv-input\"\r\n            type=\"text\"\r\n            placeholder=\"123\"\r\n            onChange={handleChangeForCreditCardCvv}\r\n            maxLength={3}\r\n            value={formFields.creditCardCvv.value}\r\n            onBlur={cvvOnBlur}\r\n            onFocus={cvvOnFocus}\r\n            name=\"creditCardCvv\"\r\n            id=\"creditCardCvv\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <button type=\"submit\" className=\"submit-credit-card-form-button\">Submit</button>\r\n    </form>\r\n  );\r\n}","import React, { useState } from 'react';\r\n\r\nimport CreditCard from './CreditCard';\r\nimport CreditCardForm from './CreditCardForm';\r\n\r\nimport validateFormFields from './utils/validate-form-fields';\r\n\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  const [formFields, setFormFields] = useState({\r\n    creditCardNumber: { value: '', showError: false },\r\n    creditCardName: { value: '', showError: false },\r\n    creditExpirationMonth: { value: '', showError: false },\r\n    creditExpirationYear: { value: '', showError: false },\r\n    creditCardCvv: { value: '', showError: false }\r\n  });\r\n\r\n  const [focusOnCreditCardNumber, setFocusOnCreditCardNumber] = useState(false);\r\n  const [focusOnCreditCardName, setFocusOnCreditCardName] = useState(false);\r\n  const [focusOnCreditCardExpirationMonth, setFocusOnCreditCardExpirationMonth] = useState(false);\r\n\r\n  const [showFront, setShowFront] = useState(true);\r\n\r\n  /**\r\n   * @description Handler for submit; it simply validates the fields\r\n   * @param {Object} event\r\n   */\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    setFormFields(previousState => {\r\n      const {\r\n        showCreditCardNumberError,\r\n        showCreditCardNameError,\r\n        showCreditExpirationMonthError,\r\n        showCreditExpirationYearError,\r\n        showCreditCvvError\r\n      } = validateFormFields(formFields);\r\n      const updatedState = {\r\n        creditCardNumber: { ...previousState.creditCardNumber, showError: showCreditCardNumberError },\r\n        creditCardName: { ...previousState.creditCardName, showError: showCreditCardNameError },\r\n        creditExpirationMonth: { ...previousState.creditExpirationMonth, showError: showCreditExpirationMonthError },\r\n        creditExpirationYear: { ...previousState.creditExpirationYear, showError: showCreditExpirationYearError },\r\n        creditCardCvv: { ...previousState.creditCardCvv, showError: showCreditCvvError }\r\n      };\r\n      return { ...updatedState };\r\n    });\r\n  }\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <CreditCard\r\n        creditCardCvvFromInput={formFields.creditCardCvv.value}\r\n        creditCardExpirationMonthFromInput={formFields.creditExpirationMonth.value}\r\n        creditCardExpirationYearFromInput={formFields.creditExpirationYear.value}   \r\n        creditCardNumberFromInput={formFields.creditCardNumber.value}\r\n        creditCardNameFromInput={formFields.creditCardName.value}\r\n        showFront={showFront}\r\n        setFocusOnCreditCardNumber={setFocusOnCreditCardNumber}\r\n        setFocusOnCreditCardName={setFocusOnCreditCardName}\r\n        setFocusOnCreditCardExpirationMonth={setFocusOnCreditCardExpirationMonth}\r\n      />\r\n      <CreditCardForm\r\n        handleSubmit={handleSubmit}\r\n        cvvOnFocus={() => setShowFront(false)}\r\n        cvvOnBlur={() => setShowFront(true)}\r\n        focusOnCreditCardNumber={focusOnCreditCardNumber}\r\n        onBlurForCreditCardNumberInput={() => setFocusOnCreditCardNumber(false)}\r\n        focusOnCreditCardName={focusOnCreditCardName}\r\n        onBlurForCreditCardNameInput={() => setFocusOnCreditCardName(false)}\r\n        focusOnCreditCardExpirationMonth={focusOnCreditCardExpirationMonth}\r\n        onBlurForCreditCardExpirationMonthInput={() => setFocusOnCreditCardExpirationMonth(false)}\r\n        formFields={formFields}\r\n        setFormFields={setFormFields}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","/**\r\n * @description Function used to encapsulate the validation logic for\r\n * the \"application\" form fields; this helps make the application more readable\r\n * @param {Object} formFields\r\n * @returns { Object }\r\n */\r\nexport default function validateFormFields(formFields) {\r\n  let showCreditCardNumberError = false;\r\n  let showCreditCardNameError = false;\r\n  let showCreditExpirationMonthError = false;\r\n  let showCreditExpirationYearError = false;\r\n  let showCreditCvvError = false;\r\n\r\n  if (formFields.creditCardNumber.value === '' || formFields.creditCardNumber.value.length !== 19) {\r\n    showCreditCardNumberError = true;\r\n  }\r\n\r\n  if (formFields.creditCardName.value.trim() === '') {\r\n    showCreditCardNameError = true;\r\n  }\r\n\r\n  if (formFields.creditExpirationMonth.value === '' || formFields.creditExpirationYear.value === '') {\r\n    showCreditExpirationMonthError = true;\r\n    showCreditExpirationYearError = true;\r\n  }\r\n\r\n  if (formFields.creditCardCvv.value.trim() === '' || formFields.creditCardCvv.value.length !== 3) {\r\n    showCreditCvvError = true;\r\n  }\r\n\r\n  return {\r\n    showCreditCardNumberError,\r\n    showCreditCardNameError,\r\n    showCreditExpirationMonthError,\r\n    showCreditExpirationYearError,\r\n    showCreditCvvError\r\n  };\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}